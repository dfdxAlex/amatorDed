<?php
namespace src\lib\php\authorization;

/**
 * Класс фасад для инфраструктуры регистрации и авторизации
 * В зависимости от имеющихся параметров данный класс 
 * создает и запускает другие объекты и методы, связанные с регистрацией
 * и входом.
 * Решается проблема загрязнения главной страницы и создания
 * ненужных объектов. 
 */
class UserFacade
{
    /**
     * Объект проверяет содержимое адрессной строки браузера и если 
     * был запрос с параметром signin, объект ставит форму ввода
     * логина и пароля, для авторизации на сайте
     */
    public function createFormLogin()
    { 
        if (isset($_GET['signin']) && $_SESSION['statusAD']==0) {
            login\LoginForm::createFormLogin();
        }

        /**
         * Если произошёл успешный вход в систему, то сообщаем 
         * об этом.
         * В момент успешного входа на сайт статус пользователя
         * изменился, но остался гет запрос в адресной строке 
         * соответствующий. Этой ситуацией воспользоваться 
         * для того, чтобы сообщить об успешном входе.
         */
        if (isset($_GET['signin'])) {
         /**
          * Чтобы вывести ошибки или сообщение об успешнов 
          * входе нужно передать класс, отвечающий за вход 
          * пользователя на сайт, классу, отвечающему за 
          * анализ массива с ошибками. Если ошибок в классе
          * входа нет, то класс анализа ошибок автоматически выдаст
          * сообщение об успешной операции
          */
          /**
           * Ссылка на класс, отвечающий за регистрацию получена
           * из контейнера объектов, в который ранее была помещена
           * эта ссылка.
           */
          $login = \src\lib\php\ContainerObject::getInstance()->getProperty('DbForAuthorization');
          if ($login)
              echo new \class\nonBD\error\ErrorMas($login);
        }
    }

    /**
     * Если появился гет параметр registration, то поставить
     * форму регистрации
     */
    public function createFormRegistration()
    {
        if (isset($_GET['registration'])  && $_SESSION['statusAD']==0) {
            registration\RegistrationUserForm::createFormRegistration();
        }

        /**
         * Если произошёл успешный вход в систему, то сообщаем 
         * об этом.
         * В момент успешного входа на сайт статус пользователя
         * изменился, но остался гет запрос в адресной строке 
         * соответствующий. Этой ситуацией воспользоваться 
         * для того, чтобы сообщить об успешном входе.
         */
        if (isset($_GET['registration'])) {
            /**
             * Чтобы вывести ошибки или сообщение об успешнов 
             * входе нужно передать класс, отвечающий за вход 
             * пользователя на сайт, классу, отвечающему за 
             * анализ массива с ошибками. Если ошибок в классе
             * входа нет, то класс анализа ошибок автоматически выдаст
             * сообщение об успешной операции
             */
             /**
              * Ссылка на класс, отвечающий за регистрацию получена
              * из контейнера объектов, в который ранее была помещена
              * эта ссылка.
              */
             $login = \src\lib\php\ContainerObject::getInstance()->getProperty('UserData');
             if ($login)
                 echo new \class\nonBD\error\ErrorMas($login);
        }
    }

    /**
     * Класс наблюдает за запросами и если в запросе будет элемент
     * гет-массива  signout, то есть isset($_GET['signout'])
     * то сбросить признак статуса к нулю.
     * Так как класс воздействует на навбар меню, то он должен
     * отработать раньше чем навигационное меню.
     */
    public function signOut()
    {
        if (isset($_GET['signout'])) {
            login\SignOut::signOut();
        }
    }

    public function registration()
    {
        /**
         * Отслежваем пост запрос с параметром $_POST['registration']
         * Если такой элемент есть в пост массиве, то значит, была 
         * нажата кнопка регистрации.
         * Данный класс обрабатывает это нажатие кнопки
         */
        if (isset($_POST['registration'])) {
            $registration = new registration\UserData();
            $rez = $registration->readDataFormRegistration();
                        /**
             * Зарегистрировать ссылку на этот объект в контейнер
             * объектов. Ссылка понадобится в другом месте
             * программы.
             */
            \src\lib\php\ContainerObject::getInstance()->setProperty('UserData',$registration);
        }
    }

    public function signIn() 
    { 
        /**
         * Данный метод фасада срабатывает тогда, когда в 
         * адресной строке есть гет параметр signin, а в форме
         * ввода логина и пароля нажата кнопка входа loginLevel2
         */
        if (isset($_GET['signin']) && isset($_POST['loginLevel2'])) {
            /**
             * данный класс проверяет пользователя по базе данных при 
             * условии, что система перешла на второй шаг авторизации
             */
            $login = new login\DbForAuthorization();
            $login->user();
            /**
             * Зарегистрировать ссылку на этот объект в контейнер
             * объектов. Ссылка понадобится в другом месте
             * программы.
             */
            \src\lib\php\ContainerObject::getInstance()->setProperty('DbForAuthorization',$login);
        }
    }
}
